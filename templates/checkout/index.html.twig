{% extends 'default.html.twig' %}

{% block title %}PCplus | Checkout{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="/assets/css/stripe.css">
<script src="https://js.stripe.com/v3/"></script>
{% endblock %}

{% block body %}
<div  class="main_content"
data-cart="{{cart_json}}" 
data-public_key="{{public_key}} "
data-orderid="{{orderId}}"
>
    <div  class="section">
        <div  class="container">
            <div  class="row">
 
            </div>
            <div  class="row">

            </div>
            <div  class="row">
                <div  class="col-md-6">
                    <div  class="heading_s1">
                        <h4>Adresse de facturation</h4>
                        <select name="billing_address" class="form-control">
                            <option value=""> Choix de l'adresse de facturation</option>
                            {% for address in addresses %}
                                <option>
                                    {{ address.clientName }}
                                    ( {{ address.street }}
                                    {{ address.codePostal }}
                                    {{ address.city }}
                                    {{ address.state }} )
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div  class="heading_s1">
                        <h4>Adresse de livraison</h4>
                        <select name="shipping_address" class="form-control">
                        <option value=""> Choix de l'adresse de livraison</option>
                            {% for address in addresses %}
                                <option>
                                    {{ address.clientName }}
                                    ( {{ address.street }}
                                    {{ address.codePostal }}
                                    {{ address.city }}
                                    {{ address.state }} )
                                </option>
                            {% endfor %}
                        </select>
                    </div>

                    <div  class="heading_s1">
                        <h4>Commentaire</h4>
                        <textarea class="form-control" name="comments" id="" cols="30" rows="10"></textarea>
                    </div>
                </div>
                <div  class="col-md-6">
                    <div  class="order_review">
                        <div  class="heading_s1">
                            <h4 >Vos commandes</h4>
                        </div>
                        <div  class="table-responsive order_table">
                            <table  class="table">
                                <thead >
                                    <tr >
                                        <th >Produit</th>
                                        <th >Total</th>
                                    </tr>
                                </thead>
                                <tbody >
                                {% for item in cart.items %}
                                    <tr>

                                        <td>
                                            <img src="/assets/images/products/{{item.product.imageUrls[0]}}"
                                            width="30" height="30" alt="">
                                        
                                            {{item.product.name}}
                                            <span class="product-qty">{{item.quantity}}</span>
                                        </td>
                                        <td>
                                            {{ (item.product.soldePrice/100) |format_currency('EUR') }}
                                        </td>
                                    </tr>
                                {% endfor %}
                                </tbody>
                                <tfoot >
                                    {# <tr >
                                        <th >SubTotal</th>
                                        <td  class="product-subtotal">{{ (cart.sub_total/100) |format_currency('EUR') }}</td>
                                    </tr> #}
                                    <tr >
                                        <th >Total</th>
                                        <td  class="product-subtotal">{{ (cart.sub_total/100) |format_currency('EUR') }}</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <div  class="payment_method">
                            
                        </div>
                        
                        <div class="payment-buttons d-none">
                            <a  href="#" class="btn btn-fill-out btn-block" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                                Paiement
                                {{ (cart.sub_total/100) |format_currency('EUR') }}
                            </a> 
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


<!-- AFFICHAGE VIA STRIPE DE L'ETAPE DE PAIEMENT -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">

      <div class="modal-body">
        <!-- Display a payment form -->
        <form id="payment-form">
            <div id="link-authentication-element">
            <!--Stripe.js injects the link authentification element -->
            </div>
        <div id="payment-element">
            <!--Stripe.js injects the Payment Element-->
        </div>
        <button id="submit">
            <div class="spinner hidden" id="spinner"></div>
            <span id="button-text">Pay now</span>
        </button>
        <div id="payment-message" class="hidden"></div>
    </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        {# <button type="button" class="btn btn-primary">Understood</button> #}
      </div>
    </div>
  </div>
</div>









    <script>
        const main_content = document.querySelector(".main_content")
        const cart = JSON.parse(main_content?.dataset?.cart || [])
        const public_key = main_content?.dataset?.public_key || ""
        const orderId = main_content?.dataset?.orderid || ""
        
        let billing_address = ""
        let shipping_address = ""
        let comment = ""
        let displayPayBtn = false

        const billing_address_select = document.querySelector('select[name="billing_address"]')
        const shipping_address_select = document.querySelector('select[name="shipping_address"]')
        const comments_textarea = document.querySelector('textarea')
        const payBtn = document.querySelector('.payment-buttons')

        const updateButton = () => {
            displayPayBtn = (!!billing_address) && (!!shipping_address)
            //console.log({displayPayBtn}, comment)
            displayPayBtn ? payBtn.classList.remove("d-none") : payBtn.classList.add("d-none")
        }



        billing_address_select.onchange = (event) => {
            billing_address = event.target.value
            updateButton()
        }

        shipping_address_select.onchange = (event) => {
            shipping_address = event.target.value
            updateButton()
        }
        comments_textarea.onchange = (event) => {
            comment = event.target.value
            updateButton()
        }

        payBtn.onclick = async () => {
            const response = await fetch("/api/order", {
                method: "POST",
                body : JSON.stringify({billing_address, shipping_address, orderId})
                })
                const result = await response.json()
                console.log({result});
        } 

        // STRIPE 


        // This is your test publishable API key.
        const stripe = Stripe(public_key);

// The items the customer wants to buy
        const items = cart.items;

        let elements;

        initialize();
        checkStatus();

        document
        .querySelector("#payment-form")
        .addEventListener("submit", handleSubmit);

        let emailAddress = ''
        // Fetches a payment intent and captures the client secret
        async function initialize() {

            const { clientSecret } = await fetch("/api/stripe/payment-intent/"+orderId, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({  }),
            }).then((r) => r.json());

        elements = stripe.elements({ clientSecret });

        const linkAuthenticationElement = elements.create("linkAuthentication");
        linkAuthenticationElement.mount("#link-authentication-element")

        const paymentElementOptions = {
            layout: "tabs",
        };

        const paymentElement = elements.create("payment", paymentElementOptions);
        paymentElement.mount("#payment-element");
        }




        async function handleSubmit(e) {
        e.preventDefault();
        setLoading(true);

        const { error } = await stripe.confirmPayment({
            elements,
            confirmParams: {
            // Make sure to change this to your payment completion page
            return_url: window.location.origin+"/stripe/payment/success",
            },
        });

        // This point will only be reached if there is an immediate error when
        // confirming the payment. Otherwise, your customer will be redirected to
        // your `return_url`. For some payment methods like iDEAL, your customer will
        // be redirected to an intermediate site first to authorize the payment, then
        // redirected to the `return_url`.
        if (error.type === "card_error" || error.type === "validation_error") {
            showMessage(error.message);
        } else {
            showMessage("An unexpected error occurred.");
        }

        setLoading(false);
        }

        // Fetches the payment intent status after payment submission
        async function checkStatus() {
        const clientSecret = new URLSearchParams(window.location.search).get(
            "payment_intent_client_secret"
        );

        if (!clientSecret) {
            return;
        }

        const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

        switch (paymentIntent.status) {
            case "succeeded":
            showMessage("Payment succeeded!");
            break;
            case "processing":
            showMessage("Your payment is processing.");
            break;
            case "requires_payment_method":
            showMessage("Your payment was not successful, please try again.");
            break;
            default:
            showMessage("Something went wrong.");
            break;
        }
        }

        // ------- UI helpers -------

        function showMessage(messageText) {
        const messageContainer = document.querySelector("#payment-message");

        messageContainer.classList.remove("hidden");
        messageContainer.textContent = messageText;

        setTimeout(function () {
            messageContainer.classList.add("hidden");
            messageContainer.textContent = "";
        }, 4000);
        }

        // Show a spinner on payment submission
        function setLoading(isLoading) {
        if (isLoading) {
            // Disable the button and show a spinner
            document.querySelector("#submit").disabled = true;
            document.querySelector("#spinner").classList.remove("hidden");
            document.querySelector("#button-text").classList.add("hidden");
        } else {
            document.querySelector("#submit").disabled = false;
            document.querySelector("#spinner").classList.add("hidden");
            document.querySelector("#button-text").classList.remove("hidden");
        }
        }


    </script>
</div>


{% endblock %}
